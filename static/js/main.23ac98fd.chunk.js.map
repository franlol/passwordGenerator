{"version":3,"sources":["utils/generator/generator.types.ts","utils/generator/generator.ts","components/Form/form.types.ts","components/Form/Input/input.types.ts","components/Form/Checkbox/Checkbox.tsx","components/Form/Select/Select.tsx","components/Form/Input/Input.tsx","components/Form/Form.tsx","components/Content/Content.tsx","components/Footer/Footer.tsx","components/Header/Header.tsx","pages/Home/Home.tsx","index.tsx"],"names":["ECharactersList","ELabels","EInput","Checkbox","forwardRef","props","inputRef","label","id","value","htmlFor","ref","type","Option","selectRef","options","className","map","option","key","Input","title","disabled","Form","useState","password","setPassowrd","cb1Ref","useRef","cb2Ref","cb3Ref","cb4Ref","cb5Ref","resultInputRef","useEffect","current","checked","INCLUDE_UPPERCASE","INCLUDE_LOWERCASE","INCLUDE_NUMBERS","INCLUDE_SIMBOLS","INCLUDE_SPECIAL_CHARS","name","CHARS_LIMIT","onClick","event","preventDefault","characterList","length","Array","fill","reduce","prev","concat","charAt","Math","floor","random","generatePassword","flags","upperCase","lowerCase","numbers","simbols","specialChars","charactersList","normals","toUpperCase","toLowerCase","specials","trim","generateCharactersList","navigator","clipboard","writeText","titleClipboard","Content","Footer","Header","Home","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.23ac98fd.chunk.js","sourcesContent":["export type TGenerateCharactersListArgs = {\r\n  upperCase: boolean;\r\n  lowerCase: boolean;\r\n  numbers: boolean;\r\n  simbols: boolean;\r\n  specialChars: boolean;\r\n}\r\n\r\nexport enum ECharactersList {\r\n  normals = 'abcdefghijklmnopqrstuvwxyz',\r\n  numbers = '0123456789',\r\n  simbols = '!@#$%^&*',\r\n  specials = '()_+~`|}{[]:;?><,./-='\r\n}\r\n","import { ECharactersList, TGenerateCharactersListArgs } from \"./generator.types\";\r\n\r\n/**\r\n * Return a string with all the characters needed to generate a password.\r\n * @param {boolean} flags.upperCase Password will contain uperrcase characters.\r\n * @param {boolean} flags.lowerCase Password will contain lowerCase characters.\r\n * @param {boolean} flags.numbers Password will contain numeric characters.\r\n * @param {boolean} flags.simbols Password will contain simbols.\r\n * @param {boolean} flags.specialChars Password will contain special characters.\r\n * \r\n * @returns {string} Characters string\r\n * @example \"abcdefghijklmnopqrstuvwxyz0123456789!@#$%^&*\"\r\n */\r\nexport const generateCharactersList = (flags: TGenerateCharactersListArgs): string => {\r\n  const {\r\n    upperCase,\r\n    lowerCase,\r\n    numbers,\r\n    simbols,\r\n    specialChars,\r\n  } = flags;\r\n\r\n  let charactersList = \"\";\r\n\r\n  if (upperCase) charactersList += ECharactersList.normals.toUpperCase()\r\n  if (lowerCase) charactersList += ECharactersList.normals.toLowerCase()\r\n  if (numbers) charactersList += ECharactersList.numbers\r\n  if (simbols) charactersList += ECharactersList.simbols\r\n  if (specialChars) charactersList += ECharactersList.specials\r\n\r\n  return charactersList.trim();\r\n}\r\n\r\n/**\r\n * Returns a password, randomly matching the characterList param string .\r\n * @param characterList String with characters to randomly use when generating the password.\r\n * @param length Desired length of the password.\r\n * @returns {String} The password.\r\n * @example \"^0M8Wjsm*i5Dcj9!2#g8ouMC\"\r\n */\r\nexport const generatePassword = (characterList: string, length: number = 16): string => {\r\n  const maxLength: number = length <= 100 ? length : 100;\r\n  const passwordLengthEmptyArray: Array<null> = Array(maxLength).fill(null);\r\n\r\n  const password: string = passwordLengthEmptyArray.reduce((prev) => {\r\n    return prev.concat(characterList.charAt(Math.floor(Math.random() * characterList.length)));\r\n  }, '');\r\n\r\n  return password;\r\n}\r\n","export enum ELabels {\r\n  INCLUDE_NUMBERS = 'Include Numbers',\r\n  INCLUDE_UPPERCASE = 'Include Uppercase',\r\n  INCLUDE_LOWERCASE = 'Include Lowercase',\r\n  INCLUDE_SIMBOLS = 'Include Simbols',\r\n  INCLUDE_SPECIAL_CHARS = 'Include Special Characters',\r\n\r\n  CHARS_LIMIT = 'Chars. limit:'\r\n}\r\n","export type TPropsInput = {\r\n  id?: string;\r\n  value: string;\r\n  setter?: React.Dispatch<React.SetStateAction<string>>;\r\n  title?: string;\r\n}\r\n\r\nexport enum EInput {\r\n  titleClipboard = 'Copy to clipboard.'\r\n}\r\n","import { forwardRef } from 'react';\r\nimport { TPropsCheckbox } from './checkbox.types'\r\n\r\nimport './checkbox.styles.scss';\r\n\r\nconst Checkbox = forwardRef<HTMLInputElement, TPropsCheckbox>((props, inputRef) => {\r\n  const { label, id, value } = props;\r\n\r\n  return (\r\n    <label htmlFor={id}>\r\n      <input ref={inputRef} type='checkbox' id={id} value={value} />\r\n      {label}\r\n    </label>\r\n  )\r\n})\r\n\r\nexport default Checkbox;\r\n","import { ForwardedRef, forwardRef } from 'react';\r\n\r\nimport { TOption, TProps } from './select.types';\r\nimport './select.styles.scss';\r\n\r\nconst Option = (props: TProps<TOption>, selectRef: ForwardedRef<HTMLSelectElement>) => {\r\n  const { id, label, options } = props;\r\n\r\n  return (\r\n    <label htmlFor={id} className='select'>\r\n      {label}\r\n      <select ref={selectRef} className='select__element'>\r\n        {options.map((option, key) => {\r\n          return <option key={key} id={`option-${key}`} className='select__option'>\r\n            {option.value}\r\n          </option>\r\n        })}\r\n      </select>\r\n    </label>\r\n  )\r\n}\r\n\r\nexport default forwardRef<HTMLSelectElement, TProps<TOption>>(Option);\r\n","import { forwardRef } from 'react'\r\nimport { TPropsInput } from './input.types';\r\n\r\nimport './input.styles.scss';\r\n\r\nconst Input = forwardRef<HTMLInputElement, TPropsInput>((props, inputRef) => {\r\n  const { id, value, title } = props;\r\n\r\n  return (\r\n    <input className=\"input__text\" ref={inputRef} id={id} type='text' disabled value={value} title={title} />\r\n  )\r\n})\r\n\r\nexport default Input;\r\n","import { useState, useRef, MouseEvent, useEffect } from 'react';\r\nimport { generateCharactersList, generatePassword } from '../../utils/generator/generator';\r\n\r\nimport Checkbox from './Checkbox/Checkbox';\r\nimport Option from './Select/Select';\r\nimport Input from './Input/Input';\r\n\r\nimport './form.styles.scss';\r\nimport { ELabels } from './form.types';\r\nimport { EInput } from './Input/input.types';\r\n\r\nexport default function Form() {\r\n  const [password, setPassowrd] = useState<string>('');\r\n\r\n  const cb1Ref = useRef<HTMLInputElement>(null);\r\n  const cb2Ref = useRef<HTMLInputElement>(null);\r\n  const cb3Ref = useRef<HTMLInputElement>(null);\r\n  const cb4Ref = useRef<HTMLInputElement>(null);\r\n  const cb5Ref = useRef<HTMLInputElement>(null);\r\n  const selectRef = useRef<HTMLSelectElement>(null);\r\n  const resultInputRef = useRef<HTMLInputElement>(null);\r\n\r\n  useEffect(() => {\r\n    cb1Ref.current!.checked = true;\r\n    cb2Ref.current!.checked = true;\r\n    cb3Ref.current!.checked = true;\r\n    cb4Ref.current!.checked = true;\r\n  }, [])\r\n\r\n  const generateClickHandler = (event: MouseEvent) => {\r\n    event.preventDefault();\r\n\r\n    const characterList = generateCharactersList({\r\n      upperCase: cb1Ref.current?.checked || false,\r\n      lowerCase: cb2Ref.current?.checked || false,\r\n      numbers: cb3Ref.current?.checked || false,\r\n      simbols: cb4Ref.current?.checked || false,\r\n      specialChars: cb5Ref.current?.checked || false,\r\n    });\r\n\r\n    const password = generatePassword(characterList, +selectRef.current!.value);\r\n\r\n    setPassowrd(password);\r\n    navigator.clipboard.writeText(password)\r\n  }\r\n\r\n  const options = [\r\n    { key: '3', value: '3' },\r\n    { key: '5', value: '5' },\r\n    { key: '8', value: '8' },\r\n    { key: '10', value: '10' },\r\n    { key: '13', value: '13' },\r\n    { key: '16', value: '16' },\r\n    { key: '18', value: '18' },\r\n    { key: '20', value: '20' },\r\n    { key: '24', value: '24' },\r\n    { key: '32', value: '32' },\r\n  ];\r\n\r\n  return (\r\n    <form className=\"form\">\r\n      <Checkbox id='cb1' label={ELabels.INCLUDE_UPPERCASE} value='cb1' ref={cb1Ref} />\r\n      <Checkbox id='cb2' label={ELabels.INCLUDE_LOWERCASE} value='cb2' ref={cb2Ref} />\r\n      <Checkbox id='cb3' label={ELabels.INCLUDE_NUMBERS} value='cb3' ref={cb3Ref} />\r\n      <Checkbox id='cb4' label={ELabels.INCLUDE_SIMBOLS} value='cb4' ref={cb4Ref} />\r\n      <Checkbox id='cb5' label={ELabels.INCLUDE_SPECIAL_CHARS} value='cb5' ref={cb5Ref} />\r\n\r\n      <Option\r\n        id='option'\r\n        name='characters_length'\r\n        label={ELabels.CHARS_LIMIT}\r\n        options={options}\r\n        ref={selectRef}\r\n      />\r\n\r\n      <div className=\"form__cta\">\r\n        <button className=\"form__button\" onClick={generateClickHandler}>Generate</button>\r\n        <Input id=\"result\" value={password} ref={resultInputRef} title={EInput.titleClipboard} />\r\n      </div>\r\n    </form>\r\n  )\r\n}\r\n","import Form from '../Form/Form'\r\n\r\nexport default function Content() {\r\n\r\n  return (\r\n    <main className=\"container\">\r\n      <Form />\r\n    </main>\r\n  )\r\n}\r\n","import './footer.styles.scss';\r\n\r\nexport default function Footer() {\r\n  return (\r\n    <footer className=\"container footer\">\r\n      With &lt;3 by fran\r\n    </footer>\r\n  )\r\n}\r\n","import './header.styles.scss';\r\n\r\nexport default function Header() {\r\n  return (\r\n    <header className=\"header container\">\r\n      <h1 className='header__h1'>Password Generator</h1>\r\n    </header>\r\n  )\r\n}\r\n","import Content from \"../../components/Content/Content\";\r\nimport Footer from \"../../components/Footer/Footer\";\r\nimport Header from \"../../components/Header/Header\";\r\n\r\nimport './home.styles.scss';\r\n\r\nexport default function Home() {\r\n  return (\r\n    <div className=\"wrapper\">\r\n      <Header />\r\n      <Content />\r\n      <Footer />\r\n    </div>\r\n  )\r\n}\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport Home from './pages/Home/Home';\nimport './styles/global.scss';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Home />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}